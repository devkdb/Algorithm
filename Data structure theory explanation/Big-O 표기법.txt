	//---- Big-O 표기법

	알고리즘의 효율을 측정하려면?
	애매모호, 환경에 의존적, 입력이 적은 구간과 많은 구간에서 성능의 차이.
	출근. 지하철, 걸어서, 자전거.. 어떤거가 더 빠른가?
	
	객관적인 지표 필요.	
	
	-- BIG-O 표기법 1단계 : 대략적인 계산
		- 수행되는 연산(산술,비교 대입등)의 개수를 '대략적으로' 판단.
	
		Add(int n); 수행되는 연산 수 1개.
		Add2(int n); for문 n+1개
		Add3(int n); 이중 for문 n*n + 1개

		
	-- BIG-O 표기법 2단계 : 대장만 남긴다.
	
		연산 횟수가 	O(1+N+4*N제곱+1) 일 경우
		= O(4*N제곱)	// 규칙1. 영향력이 가장 큰 대표 항목만 남기고 삭제.
		= O(N제곱)		// 규칙2. 상수 무시
		
		결과적으로 이 함수 Add4()는 BIG-O 표기법으로 보면
		N제곱의 시간 복잡도를 가진다고 할 수 있다.
		
		O는 Order Of라고 읽는다.
		
		BIG-O 표기법에 대한 약간 의미를 찾자면
		전달 하고 싶은 메시지는 
		이함수가 몇개의 연산량을 한다가 중요한 개념이 아니고
		데이터가 늘어남에 따라서 어떤식으로 연산량이 증가하느냐를
		알고 싶은 것이다.
		
	
	-- BIG-O 표기법의 의의
	t 	|
		|
		|
		|
		|___________________________
												n  점점 데이터가 늘어난다.

												